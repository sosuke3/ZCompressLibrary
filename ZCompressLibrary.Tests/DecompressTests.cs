using System;
using System.Linq;
using Xunit;
using System.IO;
using ZCompressLibrary;
using Xunit.Abstractions;

namespace ZCompressLibrary.Tests
{
    public class DecompressTests
    {
        readonly ITestOutputHelper output;

        public DecompressTests(ITestOutputHelper output)
        {
            this.output = output;
        }

        [Fact]
        public void should_decompress_file_moldorm_bin()
        {
            var file = File.ReadAllBytes("moldorm.bin");
            int compsize = 0;
            var decompressed = Decompress.ALTTPDecompressGraphics(file, 0, file.Length, ref compsize);
        }

        [Fact]
        public void should_decompress_feesh_mode_rom()
        {
            var file = File.ReadAllBytes("Feesh_Mode_Patched.sfc");
            int compsize = 0;
            var decompressed = Decompress.ALTTPDecompressGraphics(file, 0x08B800, file.Length - 0x08B800, ref compsize);
        }

        [Fact]
        public void should_decompress_file_ganon1_bin_and_be_same_as_ganon1_gfx()
        {
            var file = File.ReadAllBytes("ganon1.bin");
            var expected = File.ReadAllBytes("ganontest.gfx");
            int compsize = 0;
            var decompressed = Decompress.ALTTPDecompressGraphics(file, 0, file.Length, ref compsize);
            int i = 0;
            while (i < expected.Length && i < decompressed.Length)
            {
                if (expected[i] != decompressed[i])
                {
                    output.WriteLine($"mismatch at {i}, expected: {expected[i].ToString("X2")} decompressed: {decompressed[i].ToString("X2")}");
                }
                i++;
            }
            Assert.Equal(expected, decompressed);
        }

        [Fact]
        public void this_should_decompress_recompress_and_decompress_overworld()
        {
            var Original_Compressed_Data_Array1 = new byte[]
            {
                0xE0, 0x20, 0x44, 0x4A, 0x99, 0x44, 0x9A, 0x1C, 0x2D, 0x8A, 0x1D, 0x1D, 0x41, 0x1D, 0x66, 0x8A, 0x32, 0x09, 0x4B, 0x39, 0x9F, 0x4B, 0xA0, 0x3A, 0x4F, 0x2E, 0x3A, 0x1D, 0x8A, 0x8F, 0x8A, 0xAA,
                0x88, 0x83, 0xD3, 0x62, 0xA4, 0x63, 0x2F, 0x0B, 0x8C, 0x33, 0x34, 0x29, 0xAA, 0x74, 0x95, 0x4C, 0x44, 0x9A, 0x1D, 0x5A, 0x22, 0x88, 0x63, 0x35, 0x08, 0x4F, 0x39, 0x8F, 0xF9, 0x36, 0x4B, 0xA0,
                0x3A, 0x0E, 0x22, 0x01, 0x0B, 0x91, 0x92, 0x3B, 0x3D, 0x66, 0x32, 0xC5, 0xAA, 0x36, 0xA6, 0xF3, 0x77, 0x62, 0x3C, 0x0A, 0xB9, 0x82, 0x98, 0x99, 0x41, 0x1E, 0x69, 0x6A, 0xE1, 0x19, 0x1D, 0x62,
                0x3F, 0x63, 0xBC, 0x0F, 0xA1, 0xDD, 0x41, 0xFB, 0x3E, 0x6F, 0x54, 0x90, 0x0C, 0x42, 0x43, 0xDD, 0x44, 0x87, 0x88, 0xB8, 0x63, 0x45, 0x06, 0xFB, 0x32, 0xC5, 0x89, 0xDE, 0x49, 0xDD, 0x63, 0x4A,
                0xE0, 0x29, 0x40, 0xA1, 0x4E, 0x06, 0x4F, 0x1E, 0x32, 0xC5, 0xE1, 0xA5, 0x1F, 0x66, 0x4B, 0xC5, 0x50, 0xE6, 0xC5, 0xA1, 0xC3, 0xA2, 0x33, 0xA9, 0x3A, 0x3B, 0x51, 0x08, 0x52, 0x92, 0x55, 0x53,
                0x54, 0xE1, 0x53, 0x26, 0x55, 0x4B, 0x56, 0x8A, 0x57, 0x3A, 0x94, 0x19, 0x62, 0x58, 0x00, 0x19, 0x22, 0x44, 0x10, 0x5B, 0xC8, 0xA3, 0x06, 0x5C, 0x5D, 0x57, 0x9F, 0x9C, 0x9C, 0x10, 0x93, 0x9C,
                0x5E, 0x06, 0xD5, 0x5F, 0x23, 0x59, 0x06, 0x93, 0x9C, 0x9C, 0x88, 0x88, 0x60, 0x5C, 0x62, 0x61, 0x02, 0x63, 0x64, 0x4B, 0x25, 0x4C, 0x0B, 0x3E, 0xEB, 0x65, 0x97, 0x24, 0x92, 0x5D, 0x66, 0x48,
                0x49, 0xEB, 0x79, 0x22, 0xEB, 0x10, 0x3B, 0x06, 0x06, 0x12, 0x4B, 0x06, 0x63, 0xDD, 0x1D, 0x2E, 0x00, 0x40, 0x06, 0x06, 0xA2, 0x06, 0x06, 0xFF,
            };
            var Original_Decompressed_Data_Array1 = new byte[]
            {
                0x44, 0x4A, 0x99, 0x44, 0x9A, 0x1C, 0x2D, 0x8A, 0x1D, 0x1D, 0x41, 0x1D, 0x66, 0x8A, 0x32, 0x09, 0x4B, 0x39, 0x9F, 0x4B, 0xA0, 0x3A, 0x4F, 0x2E, 0x3A, 0x1D, 0x8A, 0x8F, 0x8A, 0xAA, 0x88, 0x83,
                0xD3, 0xA4, 0xA5, 0xA6, 0x2F, 0x30, 0x31, 0x32, 0x8C, 0x33, 0x34, 0x29, 0xAA, 0x74, 0x95, 0x4C, 0x44, 0x9A, 0x1D, 0x5A, 0x88, 0x88, 0x88, 0x35, 0x36, 0x37, 0x38, 0x4F, 0x39, 0x8F, 0xF9, 0x36,
                0x4B, 0xA0, 0x3A, 0x0E, 0x01, 0x01, 0x01, 0x91, 0x92, 0x3B, 0x3D, 0x66, 0x32, 0xC5, 0xAA, 0x36, 0xA6, 0xF3, 0x77, 0x3C, 0x3D, 0x3E, 0xB9, 0x82, 0x98, 0x99, 0x41, 0x1E, 0x69, 0x6A, 0xE1, 0x19,
                0x1D, 0x3F, 0x40, 0x41, 0xBC, 0xBD, 0xBE, 0xBF, 0xA1, 0xDD, 0x41, 0xFB, 0x3E, 0x6F, 0x54, 0x90, 0x0C, 0x42, 0x43, 0xDD, 0x44, 0x87, 0x88, 0xB8, 0x45, 0x46, 0x47, 0x48, 0xFB, 0x32, 0xC5, 0x89,
                0xDE, 0x49, 0xDD, 0x4A, 0x4B, 0x4C, 0x4D, 0x40, 0xA1, 0x4E, 0x06, 0x4F, 0x1E, 0x32, 0xC5, 0xE1, 0xA5, 0x1F, 0x66, 0x4B, 0xC5, 0x50, 0xE6, 0xC5, 0xA1, 0xC3, 0xA2, 0x33, 0xA9, 0x3A, 0x3B, 0x51,
                0x08, 0x52, 0x92, 0x55, 0x53, 0x54, 0xE1, 0x53, 0x26, 0x55, 0x4B, 0x56, 0x8A, 0x57, 0x3A, 0x94, 0x19, 0x58, 0x59, 0x5A, 0x19, 0x44, 0x44, 0x44, 0x5B, 0xC8, 0xA3, 0x06, 0x5C, 0x5D, 0x57, 0x9F,
                0x9C, 0x9C, 0x10, 0x93, 0x9C, 0x5E, 0x06, 0xD5, 0x5F, 0x59, 0x59, 0x59, 0x59, 0x93, 0x9C, 0x9C, 0x88, 0x88, 0x60, 0x5C, 0x61, 0x62, 0x63, 0x63, 0x64, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
                0x3E, 0xEB, 0x65, 0x97, 0x24, 0x92, 0x5D, 0x66, 0x48, 0x49, 0xEB, 0x79, 0xEB, 0xEB, 0xEB, 0x3B, 0x06, 0x06, 0x12, 0x4B, 0x06, 0x63, 0xDD, 0x1D, 0x2E, 0x00, 0x40, 0x06, 0x06, 0xA2, 0x06, 0x06,
            };

            var Original_Compressed_Data_Array2 = new byte[]
            {
                0x01, 0x08, 0x04, 0x22, 0x08, 0x0C, 0x00, 0x1B, 0x06, 0x00, 0x00, 0x07, 0x00, 0x06, 0x04, 0x03, 0x06, 0x08, 0x04, 0x22, 0x08, 0x0A, 0x06, 0x02, 0x1B, 0x06, 0x00, 0x0C, 0x06, 0x04, 0x04, 0x08,
                0x09, 0x23, 0x08, 0x23, 0x1B, 0x00, 0x06, 0x22, 0x1B, 0x07, 0x04, 0x0C, 0x16, 0x0C, 0x08, 0x08, 0x00, 0x0E, 0x22, 0x03, 0x23, 0x1B, 0x04, 0x05, 0x1B, 0x08, 0x10, 0x07, 0x83, 0x00, 0x22, 0x22,
                0x0A, 0x0B, 0x03, 0x03, 0x1B, 0x0E, 0x06, 0x03, 0x05, 0x08, 0x07, 0x08, 0x14, 0x01, 0x22, 0x1B, 0x0A, 0x15, 0x16, 0x03, 0x03, 0x07, 0x01, 0x08, 0x08, 0x05, 0x07, 0x00, 0x22, 0x1B, 0x23, 0x15,
                0x07, 0x03, 0x02, 0x07, 0x00, 0x02, 0x08, 0x07, 0x09, 0x22, 0x1B, 0x04, 0x0D, 0x1B, 0x16, 0x16, 0x0D, 0x23, 0x1B, 0x06, 0x00, 0x03, 0x05, 0x07, 0x02, 0x1B, 0x0D, 0x23, 0x1B, 0x01, 0x19, 0x03,
                0x43, 0x1B, 0x01, 0x16, 0x03, 0x05, 0x05, 0x00, 0x00, 0x06, 0x01, 0x07, 0x1B, 0x07, 0x07, 0x03, 0x10, 0x06, 0x0B, 0x00, 0x07, 0x07, 0x1B, 0x02, 0x1B, 0x0F, 0x05, 0x83, 0x00, 0x71, 0x07, 0x07,
                0x1B, 0x0B, 0x1B, 0x06, 0x1B, 0x07, 0x0B, 0x24, 0x1B, 0x22, 0x0F, 0x03, 0x1B, 0x19, 0x06, 0x01, 0x22, 0x1B, 0x09, 0x0B, 0x06, 0x06, 0x0F, 0x06, 0x06, 0x1B, 0x01, 0x09, 0x1B, 0x23, 0x02, 0x22,
                0x06, 0x03, 0x03, 0x03, 0x1B, 0x03, 0x24, 0x1B, 0x26, 0x02, 0x07, 0x0F, 0x01, 0x1B, 0x0D, 0x11, 0x15, 0x03, 0x06, 0x22, 0x01, 0x00, 0x0A, 0x22, 0x01, 0x08, 0x0E, 0x01, 0x01, 0x0F, 0x0D, 0x01,
                0x03, 0x02, 0x00, 0x84, 0x00, 0xED, 0x02, 0x0D, 0x01, 0x01, 0xFF,
            };
            var Original_Decompressed_Data_Array2 = new byte[]
            {
                0x08, 0x04, 0x08, 0x08, 0x08, 0x00, 0x1B, 0x06, 0x00, 0x00, 0x07, 0x00, 0x06, 0x04, 0x03, 0x06, 0x08, 0x04, 0x08, 0x08, 0x08, 0x06, 0x02, 0x1B, 0x06, 0x00, 0x0C, 0x06, 0x04, 0x04, 0x08, 0x09,
                0x08, 0x08, 0x08, 0x08, 0x1B, 0x1B, 0x1B, 0x1B, 0x06, 0x1B, 0x1B, 0x1B, 0x04, 0x0C, 0x16, 0x0C, 0x08, 0x08, 0x00, 0x0E, 0x03, 0x03, 0x03, 0x1B, 0x1B, 0x1B, 0x1B, 0x05, 0x1B, 0x08, 0x10, 0x07,
                0x08, 0x08, 0x1B, 0x1B, 0x0A, 0x0A, 0x0A, 0x03, 0x03, 0x1B, 0x0E, 0x06, 0x03, 0x05, 0x08, 0x07, 0x08, 0x14, 0x01, 0x1B, 0x1B, 0x1B, 0x15, 0x16, 0x03, 0x03, 0x07, 0x01, 0x08, 0x08, 0x05, 0x07,
                0x00, 0x1B, 0x1B, 0x1B, 0x15, 0x15, 0x15, 0x15, 0x03, 0x02, 0x07, 0x00, 0x02, 0x08, 0x07, 0x09, 0x1B, 0x1B, 0x1B, 0x0D, 0x1B, 0x16, 0x16, 0x0D, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x03, 0x05, 0x07,
                0x02, 0x1B, 0x0D, 0x1B, 0x1B, 0x1B, 0x1B, 0x19, 0x03, 0x1B, 0x01, 0x1B, 0x01, 0x03, 0x05, 0x05, 0x00, 0x00, 0x06, 0x01, 0x07, 0x1B, 0x07, 0x07, 0x03, 0x10, 0x06, 0x0B, 0x00, 0x07, 0x07, 0x1B,
                0x02, 0x1B, 0x0F, 0x05, 0x1B, 0x1B, 0x0D, 0x1B, 0x07, 0x1B, 0x0B, 0x1B, 0x06, 0x1B, 0x07, 0x0B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x0F, 0x0F, 0x0F, 0x1B, 0x19, 0x06, 0x01, 0x1B, 0x1B, 0x1B, 0x0B,
                0x06, 0x06, 0x0F, 0x06, 0x06, 0x1B, 0x01, 0x09, 0x1B, 0x02, 0x02, 0x02, 0x02, 0x06, 0x06, 0x06, 0x03, 0x03, 0x1B, 0x03, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
                0x0F, 0x01, 0x1B, 0x0D, 0x11, 0x15, 0x03, 0x06, 0x01, 0x01, 0x01, 0x0A, 0x01, 0x01, 0x01, 0x0E, 0x01, 0x01, 0x0F, 0x0D, 0x01, 0x03, 0x02, 0x00, 0x01, 0x01, 0x0E, 0x01, 0x01, 0x0D, 0x01, 0x01,
            };

            try_decompres_recomp_decomp_overworld(Original_Compressed_Data_Array1, Original_Decompressed_Data_Array1);
            try_decompres_recomp_decomp_overworld(Original_Compressed_Data_Array2, Original_Decompressed_Data_Array2);
        }

        public void try_decompres_recomp_decomp_overworld(byte[] originalCompressed, byte[] expectedDecompress)
        {
            int compsize = 0;
            var decompressed = Decompress.ALTTPDecompressOverworld(originalCompressed, 0, originalCompressed.Length, ref compsize);
            int i = 0;
            while (i < expectedDecompress.Length && i < decompressed.Length)
            {
                if (expectedDecompress[i] != decompressed[i])
                {
                    output.WriteLine($"mismatch at {i}, expected: {expectedDecompress[i].ToString("X2")} decompressed: {decompressed[i].ToString("X2")}");
                }
                i++;
            }
            Assert.Equal(expectedDecompress, decompressed);

            // recompress
            var recomp = Compress.ALTTPCompressOverworld(decompressed, 0, decompressed.Length);
            bool same = false;
            try
            {
                i = 0;
                while (i < originalCompressed.Length && i < recomp.Length)
                {
                    if (originalCompressed[i] != recomp[i])
                    {
                        output.WriteLine($"recompress mismatch at {i}, expected: {originalCompressed[i].ToString("X2")} recomp: {recomp[i].ToString("X2")}");
                    }
                    i++;
                }

                Assert.Equal(originalCompressed, recomp);
                same = true;
            }
            catch(Exception ex)
            {
                same = false;
            }
            output.WriteLine($"recompress is same as original compresssed? {same}");

            decompressed = Decompress.ALTTPDecompressOverworld(recomp, 0, recomp.Length, ref compsize);
            i = 0;
            while (i < expectedDecompress.Length && i < decompressed.Length)
            {
                if (expectedDecompress[i] != decompressed[i])
                {
                    output.WriteLine($"mismatch at {i}, expected: {expectedDecompress[i].ToString("X2")} decompressed: {decompressed[i].ToString("X2")}");
                }
                i++;
            }
            Assert.Equal(expectedDecompress, decompressed);

        }
    }
}